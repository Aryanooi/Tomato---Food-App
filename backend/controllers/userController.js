import userModel from "../models/userModel.js";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import validator from "validator";

// login user
const loginUser = async (req, res) => {
    const { email, password } = req.body;
    try{
        //check if user exist
        const user=await userModel.findOne({email:email});
        if(!user){
            return res.status(400).json({success:false,message:"User does not exist"});
        } 
        //compare password
        const isMatch=await bcrypt.compare(password,user.password);
        if(!isMatch){
            return res.status(400).json({success:false,message:"Invalid credentials"});
        } 
        const token=createToken(user._id);
        res.json({success:true,token:token});
                          
    }catch(error){
        res.status(500).json({success:false,message:"Server error"});
    }
}

const createToken = (id) => { // id self generated by mongodb
    return jwt.sign({ id }, process.env.JWT_SECRET);
}
// register user
const registerUser = async (req, res) => {
    const { name, email, password } = req.body;
    try{
        //check if user exist
        const exist=await userModel.findOne({email:email});
        if(exist){
            return res.status(400).json({success:false,message:"User already exist"});
        }
        //validate email format and strong password
        if(!validator.isEmail(email)){
            return res.status(400).json({success:false,message:"Invalid email format"});
        } 
        if(password.length<8){
            return res.status(400).json({success:false,message:"Please enter strong password"});
        }
        // if(!validator.isStrongPassword(password)){
        //     return res.status(400).json({success:false,message:"Password is not strong enough"});
        // }
        //hash password user password
        const salt=await bcrypt.genSalt(10);
        const hashedPassword=await bcrypt.hash(password,salt);
        //create new user
        const newUser=new userModel({
            name:name,
            email:email,
            password:hashedPassword
        });
        const user=await newUser.save();
        const token=createToken(user._id);
        res.json({success:true,token:token});
        res.status(201).json({success:true,message:"User registered successfully"});
    }catch(error){
        console.log(error);
        res.status(500).json({success:false,message:"Server error"});
    }
}


export { loginUser, registerUser };